//Generated by the GOLD Parser Builder
//some code from sample projects at http://www.goldparser.org/engine/5/net/index.htm

using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace DB338Core
{
    class SQLParser
    {
        private GOLD.Parser parser = new GOLD.Parser();

        private enum SymbolIndex
        {
            @Eof = 0,                                  // (EOF)
            @Error = 1,                                // (Error)
            @Whitespace = 2,                           // Whitespace
            @Commentend = 3,                           // 'Comment End'
            @Commentline = 4,                          // 'Comment Line'
            @Commentstart = 5,                         // 'Comment Start'
            @Minus = 6,                                // '-'
            @Exclameq = 7,                             // '!='
            @Lparen = 8,                               // '('
            @Rparen = 9,                               // ')'
            @Times = 10,                               // '*'
            @Comma = 11,                               // ','
            @Div = 12,                                 // '/'
            @Plus = 13,                                // '+'
            @Lt = 14,                                  // '<'
            @Lteq = 15,                                // '<='
            @Ltgt = 16,                                // '<>'
            @Eq = 17,                                  // '='
            @Gt = 18,                                  // '>'
            @Gteq = 19,                                // '>='
            @Add = 20,                                 // ADD
            @All = 21,                                 // ALL
            @Alter = 22,                               // ALTER
            @And = 23,                                 // AND
            @Asc = 24,                                 // ASC
            @Avg = 25,                                 // Avg
            @Between = 26,                             // BETWEEN
            @Bit = 27,                                 // BIT
            @By = 28,                                  // BY
            @Character = 29,                           // CHARACTER
            @Column = 30,                              // COLUMN
            @Constraint = 31,                          // CONSTRAINT
            @Count = 32,                               // Count
            @Create = 33,                              // CREATE
            @Date = 34,                                // DATE
            @Decimal = 35,                             // DECIMAL
            @Delete = 36,                              // DELETE
            @Desc = 37,                                // DESC
            @Disallow = 38,                            // DISALLOW
            @Distinct = 39,                            // DISTINCT
            @Drop = 40,                                // DROP
            @Float = 41,                               // FLOAT
            @Foreign = 42,                             // FOREIGN
            @From = 43,                                // FROM
            @Group = 44,                               // GROUP
            @Having = 45,                              // HAVING
            @Id = 46,                                  // Id
            @Ignore = 47,                              // IGNORE
            @In = 48,                                  // IN
            @Index = 49,                               // INDEX
            @Inner = 50,                               // INNER
            @Insert = 51,                              // INSERT
            @Integer = 52,                             // INTEGER
            @Integerliteral = 53,                      // IntegerLiteral
            @Interval = 54,                            // INTERVAL
            @Into = 55,                                // INTO
            @Is = 56,                                  // IS
            @Join = 57,                                // JOIN
            @Key = 58,                                 // KEY
            @Left = 59,                                // LEFT
            @Like = 60,                                // LIKE
            @Max = 61,                                 // Max
            @Min = 62,                                 // Min
            @Not = 63,                                 // NOT
            @Null = 64,                                // NULL
            @On = 65,                                  // ON
            @Or = 66,                                  // OR
            @Order = 67,                               // ORDER
            @Primary = 68,                             // PRIMARY
            @Real = 69,                                // REAL
            @Realliteral = 70,                         // RealLiteral
            @References = 71,                          // REFERENCES
            @Right = 72,                               // RIGHT
            @Select = 73,                              // SELECT
            @Set = 74,                                 // SET
            @Smallint = 75,                            // SMALLINT
            @Stdev = 76,                               // StDev
            @Stdevp = 77,                              // StDevP
            @Stringliteral = 78,                       // StringLiteral
            @Sum = 79,                                 // Sum
            @Table = 80,                               // TABLE
            @Time = 81,                                // TIME
            @Timestamp = 82,                           // TIMESTAMP
            @Unique = 83,                              // UNIQUE
            @Update = 84,                              // UPDATE
            @Values = 85,                              // VALUES
            @Var = 86,                                 // Var
            @Varp = 87,                                // VarP
            @Where = 88,                               // WHERE
            @With = 89,                                // WITH
            @Addexp = 90,                              // <Add Exp>
            @Aggregate = 91,                           // <Aggregate>
            @Alterstm = 92,                            // <Alter Stm>
            @Andexp = 93,                              // <And Exp>
            @Assignlist = 94,                          // <Assign List>
            @Columnitem = 95,                          // <Column Item>
            @Columnlist = 96,                          // <Column List>
            @Columnsource = 97,                        // <Column Source>
            @Columns = 98,                             // <Columns>
            @Constraint2 = 99,                         // <Constraint>
            @Constraintopt = 100,                      // <Constraint Opt>
            @Constrainttype = 101,                     // <Constraint Type>
            @Createstm = 102,                          // <Create Stm>
            @Deletestm = 103,                          // <Delete Stm>
            @Dropstm = 104,                            // <Drop Stm>
            @Exprlist = 105,                           // <Expr List>
            @Expression = 106,                         // <Expression>
            @Fielddef = 107,                           // <Field Def>
            @Fielddeflist = 108,                       // <Field Def List>
            @Fromclause = 109,                         // <From Clause>
            @Groupclause = 110,                        // <Group Clause>
            @Havingclause = 111,                       // <Having Clause>
            @Idlist = 112,                             // <ID List>
            @Idmember = 113,                           // <Id Member>
            @Insertstm = 114,                          // <Insert Stm>
            @Intoclause = 115,                         // <Into Clause>
            @Join2 = 116,                              // <Join>
            @Joinchain = 117,                          // <Join Chain>
            @Multexp = 118,                            // <Mult Exp>
            @Negateexp = 119,                          // <Negate Exp>
            @Notexp = 120,                             // <Not Exp>
            @Orderclause = 121,                        // <Order Clause>
            @Orderlist = 122,                          // <Order List>
            @Ordertype = 123,                          // <Order Type>
            @Predexp = 124,                            // <Pred Exp>
            @Query = 125,                              // <Query>
            @Restriction = 126,                        // <Restriction>
            @Selectstm = 127,                          // <Select Stm>
            @Tuple = 128,                              // <Tuple>
            @Type = 129,                               // <Type>
            @Unique2 = 130,                            // <Unique>
            @Updatestm = 131,                          // <Update Stm>
            @Value = 132,                              // <Value>
            @Whereclause = 133,                        // <Where Clause>
            @Withclause = 134                          // <With Clause>
        }

        private enum ProductionIndex
        {
            @Query = 0,                                // <Query> ::= <Alter Stm>
            @Query2 = 1,                               // <Query> ::= <Create Stm>
            @Query3 = 2,                               // <Query> ::= <Delete Stm>
            @Query4 = 3,                               // <Query> ::= <Drop Stm>
            @Query5 = 4,                               // <Query> ::= <Insert Stm>
            @Query6 = 5,                               // <Query> ::= <Select Stm>
            @Query7 = 6,                               // <Query> ::= <Update Stm>
            @Alterstm_Alter_Table_Id_Add_Column = 7,   // <Alter Stm> ::= ALTER TABLE Id ADD COLUMN <Field Def List> <Constraint Opt>
            @Alterstm_Alter_Table_Id_Add = 8,          // <Alter Stm> ::= ALTER TABLE Id ADD <Constraint>
            @Alterstm_Alter_Table_Id_Drop_Column_Id = 9,  // <Alter Stm> ::= ALTER TABLE Id DROP COLUMN Id
            @Alterstm_Alter_Table_Id_Drop_Constraint_Id = 10,  // <Alter Stm> ::= ALTER TABLE Id DROP CONSTRAINT Id
            @Createstm_Create_Index_Integerliteral_On_Id_Lparen_Rparen = 11,  // <Create Stm> ::= CREATE <Unique> INDEX IntegerLiteral ON Id '(' <Order List> ')' <With Clause>
            @Createstm_Create_Table_Id_Lparen_Rparen = 12,  // <Create Stm> ::= CREATE TABLE Id '(' <ID List> ')' <Constraint Opt>
            @Unique_Unique = 13,                       // <Unique> ::= UNIQUE
            @Unique = 14,                              // <Unique> ::= 
            @Withclause_With_Primary = 15,             // <With Clause> ::= WITH PRIMARY
            @Withclause_With_Disallow_Null = 16,       // <With Clause> ::= WITH DISALLOW NULL
            @Withclause_With_Ignore_Null = 17,         // <With Clause> ::= WITH IGNORE NULL
            @Withclause = 18,                          // <With Clause> ::= 
            @Fielddef_Id_Not_Null = 19,                // <Field Def> ::= Id <Type> NOT NULL
            @Fielddef_Id = 20,                         // <Field Def> ::= Id <Type>
            @Fielddeflist_Comma = 21,                  // <Field Def List> ::= <Field Def> ',' <Field Def List>
            @Fielddeflist = 22,                        // <Field Def List> ::= <Field Def>
            @Type_Bit = 23,                            // <Type> ::= BIT
            @Type_Date = 24,                           // <Type> ::= DATE
            @Type_Time = 25,                           // <Type> ::= TIME
            @Type_Timestamp = 26,                      // <Type> ::= TIMESTAMP
            @Type_Decimal = 27,                        // <Type> ::= DECIMAL
            @Type_Real = 28,                           // <Type> ::= REAL
            @Type_Float = 29,                          // <Type> ::= FLOAT
            @Type_Smallint = 30,                       // <Type> ::= SMALLINT
            @Type_Integer = 31,                        // <Type> ::= INTEGER
            @Type_Interval = 32,                       // <Type> ::= INTERVAL
            @Type_Character = 33,                      // <Type> ::= CHARACTER
            @Constraintopt = 34,                       // <Constraint Opt> ::= <Constraint>
            @Constraintopt2 = 35,                      // <Constraint Opt> ::= 
            @Constraint_Constraint_Id = 36,            // <Constraint> ::= CONSTRAINT Id <Constraint Type>
            @Constraint_Constraint_Id2 = 37,           // <Constraint> ::= CONSTRAINT Id
            @Constrainttype_Primary_Key_Lparen_Rparen = 38,  // <Constraint Type> ::= PRIMARY KEY '(' <ID List> ')'
            @Constrainttype_Unique_Lparen_Rparen = 39,  // <Constraint Type> ::= UNIQUE '(' <ID List> ')'
            @Constrainttype_Not_Null_Lparen_Rparen = 40,  // <Constraint Type> ::= NOT NULL '(' <ID List> ')'
            @Constrainttype_Foreign_Key_Lparen_Rparen_References_Id_Lparen_Rparen = 41,  // <Constraint Type> ::= FOREIGN KEY '(' <ID List> ')' REFERENCES Id '(' <ID List> ')'
            @Dropstm_Drop_Table_Id = 42,               // <Drop Stm> ::= DROP TABLE Id
            @Dropstm_Drop_Index_Id_On_Id = 43,         // <Drop Stm> ::= DROP INDEX Id ON Id
            @Insertstm_Insert_Into_Id_Lparen_Rparen = 44,  // <Insert Stm> ::= INSERT INTO Id '(' <ID List> ')' <Select Stm>
            @Insertstm_Insert_Into_Id_Lparen_Rparen_Values_Lparen_Rparen = 45,  // <Insert Stm> ::= INSERT INTO Id '(' <ID List> ')' VALUES '(' <Expr List> ')'
            @Updatestm_Update_Id_Set = 46,             // <Update Stm> ::= UPDATE Id SET <Assign List> <Where Clause>
            @Assignlist_Id_Eq_Comma = 47,              // <Assign List> ::= Id '=' <Expression> ',' <Assign List>
            @Assignlist_Id_Eq = 48,                    // <Assign List> ::= Id '=' <Expression>
            @Deletestm_Delete_From_Id = 49,            // <Delete Stm> ::= DELETE FROM Id <Where Clause>
            @Selectstm_Select = 50,                    // <Select Stm> ::= SELECT <Columns> <Into Clause> <From Clause> <Where Clause> <Group Clause> <Having Clause> <Order Clause>
            @Columns_Times = 51,                       // <Columns> ::= <Restriction> '*'
            @Columns = 52,                             // <Columns> ::= <Restriction> <Column List>
            @Columnlist_Comma = 53,                    // <Column List> ::= <Column Item> ',' <Column List>
            @Columnlist = 54,                          // <Column List> ::= <Column Item>
            @Columnitem = 55,                          // <Column Item> ::= <Column Source>
            @Columnitem_Id = 56,                       // <Column Item> ::= <Column Source> Id
            @Columnsource = 57,                        // <Column Source> ::= <Aggregate>
            @Columnsource_Id = 58,                     // <Column Source> ::= Id
            @Restriction_All = 59,                     // <Restriction> ::= ALL
            @Restriction_Distinct = 60,                // <Restriction> ::= DISTINCT
            @Restriction = 61,                         // <Restriction> ::= 
            @Aggregate_Count_Lparen_Times_Rparen = 62,  // <Aggregate> ::= Count '(' '*' ')'
            @Aggregate_Count_Lparen_Rparen = 63,       // <Aggregate> ::= Count '(' <Expression> ')'
            @Aggregate_Avg_Lparen_Rparen = 64,         // <Aggregate> ::= Avg '(' <Expression> ')'
            @Aggregate_Min_Lparen_Rparen = 65,         // <Aggregate> ::= Min '(' <Expression> ')'
            @Aggregate_Max_Lparen_Rparen = 66,         // <Aggregate> ::= Max '(' <Expression> ')'
            @Aggregate_Stdev_Lparen_Rparen = 67,       // <Aggregate> ::= StDev '(' <Expression> ')'
            @Aggregate_Stdevp_Lparen_Rparen = 68,      // <Aggregate> ::= StDevP '(' <Expression> ')'
            @Aggregate_Sum_Lparen_Rparen = 69,         // <Aggregate> ::= Sum '(' <Expression> ')'
            @Aggregate_Var_Lparen_Rparen = 70,         // <Aggregate> ::= Var '(' <Expression> ')'
            @Aggregate_Varp_Lparen_Rparen = 71,        // <Aggregate> ::= VarP '(' <Expression> ')'
            @Intoclause_Into_Id = 72,                  // <Into Clause> ::= INTO Id
            @Intoclause = 73,                          // <Into Clause> ::= 
            @Fromclause_From = 74,                     // <From Clause> ::= FROM <ID List> <Join Chain>
            @Joinchain = 75,                           // <Join Chain> ::= <Join> <Join Chain>
            @Joinchain2 = 76,                          // <Join Chain> ::= 
            @Join_Inner_Join_On_Id_Eq_Id = 77,         // <Join> ::= INNER JOIN <ID List> ON Id '=' Id
            @Join_Left_Join_On_Id_Eq_Id = 78,          // <Join> ::= LEFT JOIN <ID List> ON Id '=' Id
            @Join_Right_Join_On_Id_Eq_Id = 79,         // <Join> ::= RIGHT JOIN <ID List> ON Id '=' Id
            @Join_Join_On_Id_Eq_Id = 80,               // <Join> ::= JOIN <ID List> ON Id '=' Id
            @Whereclause_Where = 81,                   // <Where Clause> ::= WHERE <Expression>
            @Whereclause = 82,                         // <Where Clause> ::= 
            @Groupclause_Group_By = 83,                // <Group Clause> ::= GROUP BY <ID List>
            @Groupclause = 84,                         // <Group Clause> ::= 
            @Orderclause_Order_By = 85,                // <Order Clause> ::= ORDER BY <Order List>
            @Orderclause = 86,                         // <Order Clause> ::= 
            @Orderlist_Id_Comma = 87,                  // <Order List> ::= Id <Order Type> ',' <Order List>
            @Orderlist_Id = 88,                        // <Order List> ::= Id <Order Type>
            @Ordertype_Asc = 89,                       // <Order Type> ::= ASC
            @Ordertype_Desc = 90,                      // <Order Type> ::= DESC
            @Ordertype = 91,                           // <Order Type> ::= 
            @Havingclause_Having = 92,                 // <Having Clause> ::= HAVING <Expression>
            @Havingclause = 93,                        // <Having Clause> ::= 
            @Expression_Or = 94,                       // <Expression> ::= <And Exp> OR <Expression>
            @Expression = 95,                          // <Expression> ::= <And Exp>
            @Andexp_And = 96,                          // <And Exp> ::= <Not Exp> AND <And Exp>
            @Andexp = 97,                              // <And Exp> ::= <Not Exp>
            @Notexp_Not = 98,                          // <Not Exp> ::= NOT <Pred Exp>
            @Notexp = 99,                              // <Not Exp> ::= <Pred Exp>
            @Predexp_Between_And = 100,                // <Pred Exp> ::= <Add Exp> BETWEEN <Add Exp> AND <Add Exp>
            @Predexp_Not_Between_And = 101,            // <Pred Exp> ::= <Add Exp> NOT BETWEEN <Add Exp> AND <Add Exp>
            @Predexp_Is_Not_Null = 102,                // <Pred Exp> ::= <Value> IS NOT NULL
            @Predexp_Is_Null = 103,                    // <Pred Exp> ::= <Value> IS NULL
            @Predexp_Like_Stringliteral = 104,         // <Pred Exp> ::= <Add Exp> LIKE StringLiteral
            @Predexp_In = 105,                         // <Pred Exp> ::= <Add Exp> IN <Tuple>
            @Predexp_Eq = 106,                         // <Pred Exp> ::= <Add Exp> '=' <Add Exp>
            @Predexp_Ltgt = 107,                       // <Pred Exp> ::= <Add Exp> '<>' <Add Exp>
            @Predexp_Exclameq = 108,                   // <Pred Exp> ::= <Add Exp> '!=' <Add Exp>
            @Predexp_Gt = 109,                         // <Pred Exp> ::= <Add Exp> '>' <Add Exp>
            @Predexp_Gteq = 110,                       // <Pred Exp> ::= <Add Exp> '>=' <Add Exp>
            @Predexp_Lt = 111,                         // <Pred Exp> ::= <Add Exp> '<' <Add Exp>
            @Predexp_Lteq = 112,                       // <Pred Exp> ::= <Add Exp> '<=' <Add Exp>
            @Predexp = 113,                            // <Pred Exp> ::= <Add Exp>
            @Addexp_Plus = 114,                        // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
            @Addexp_Minus = 115,                       // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
            @Addexp = 116,                             // <Add Exp> ::= <Mult Exp>
            @Multexp_Times = 117,                      // <Mult Exp> ::= <Mult Exp> '*' <Negate Exp>
            @Multexp_Div = 118,                        // <Mult Exp> ::= <Mult Exp> '/' <Negate Exp>
            @Multexp = 119,                            // <Mult Exp> ::= <Negate Exp>
            @Negateexp_Minus = 120,                    // <Negate Exp> ::= '-' <Value>
            @Negateexp = 121,                          // <Negate Exp> ::= <Value>
            @Value = 122,                              // <Value> ::= <Tuple>
            @Value_Id = 123,                           // <Value> ::= Id
            @Value_Integerliteral = 124,               // <Value> ::= IntegerLiteral
            @Value_Realliteral = 125,                  // <Value> ::= RealLiteral
            @Value_Stringliteral = 126,                // <Value> ::= StringLiteral
            @Value_Null = 127,                         // <Value> ::= NULL
            @Tuple_Lparen_Rparen = 128,                // <Tuple> ::= '(' <Select Stm> ')'
            @Tuple_Lparen_Rparen2 = 129,               // <Tuple> ::= '(' <Expr List> ')'
            @Exprlist_Comma = 130,                     // <Expr List> ::= <Expression> ',' <Expr List>
            @Exprlist = 131,                           // <Expr List> ::= <Expression>
            @Idlist_Comma = 132,                       // <ID List> ::= <Id Member> ',' <ID List>
            @Idlist = 133,                             // <ID List> ::= <Id Member>
            @Idmember_Id = 134,                        // <Id Member> ::= Id
            @Idmember_Id_Id = 135                      // <Id Member> ::= Id Id
        }

        public GOLD.Reduction root;     //You might derive a specific object

        public void Setup()
        {
            //This procedure can be called to load the parse tables. The class can
            //read tables using a BinaryReader.

            parser.LoadTables(Path.Combine(Application.StartupPath, "grammar.egt"));
        }

        public List<string> Parse(TextReader reader)
        {
            //This procedure starts the GOLD Parser Engine and handles each of the
            //messages it returns. Each time a reduction is made, you can create new
            //custom object and reassign the .CurrentReduction property. Otherwise, 
            //the system will use the Reduction object that was returned.
            //
            //The resulting tree will be a pure representation of the language 
            //and will be ready to implement.
            
            //reset root node
            root = null;

            GOLD.ParseMessage response;
            bool done;                      //Controls when we leave the loop
            bool accepted = false;          //Was the parse successful?
            string statementType;
            statementType = "unknown";
            string errorType;
            errorType = "none";

            parser.Open(reader);
            parser.TrimReductions = false;  //Please read about this feature before enabling  

            done = false;
            while (!done)
            {
                response = parser.Parse();

                switch (response)
                {
                    case GOLD.ParseMessage.LexicalError:
                        //Cannot recognize token
                        errorType = "lexical";
                        done = true;
                        break;

                    case GOLD.ParseMessage.SyntaxError:
                        //Expecting a different token
                        errorType = "syntax";
                        done = true;
                        break;

                    case GOLD.ParseMessage.Reduction:
                        //Create a customized object to store the reduction
                        string tmp = (string)CreateNewObject(parser.CurrentReduction as GOLD.Reduction);
                        if (tmp != null)
                            statementType = tmp;
                        break;

                    case GOLD.ParseMessage.Accept:
                        //Accepted!
                        root = (GOLD.Reduction)parser.CurrentReduction;   //The root node!
                        done = true;
                        accepted = true;
                        break;

                    case GOLD.ParseMessage.TokenRead:
                        //You don't have to do anything here.
                        break;

                    case GOLD.ParseMessage.InternalError:
                        //INTERNAL ERROR! Something is horribly wrong.
                        errorType = "internal";
                        done = true;
                        break;

                    case GOLD.ParseMessage.NotLoadedError:
                        //This error occurs if the CGT was not loaded.
                        errorType = "cgt";
                        done = true;
                        break;

                    case GOLD.ParseMessage.GroupError:
                        //GROUP ERROR! Unexpected end of file
                        errorType = "eof";
                        done = true;
                        break;
                }
            } //while

            List<string> tokens = new List<string>();
            
            if (root != null)
                tokens = GetSQLLeafNodes(root);

            tokens.Add(statementType);
            tokens.Add(done.ToString());
            tokens.Add(accepted.ToString());
            tokens.Add(errorType);

            return tokens;
        }

        private List<string> GetSQLLeafNodes(GOLD.Reduction root)
        {
            List<string> tokens = new List<string>();
            FindLeaf(tokens, root);
            return tokens;
        }
        private void FindLeaf(List<string> tokens, GOLD.Reduction reduction)
        {
            for (int n = 0; n < reduction.Count(); ++n)
            {
                switch (reduction[n].Type())
                {
                    case GOLD.SymbolType.Nonterminal:
                        GOLD.Reduction branch = (GOLD.Reduction)reduction[n].Data;
                        FindLeaf(tokens, branch);
                        break;
                    default:
                        string leaf = (string)reduction[n].Data;
                        tokens.Add(leaf);
                        break;
                }
            }
        }

        private object CreateNewObject(GOLD.Reduction r)
        {
            object result = null;

            switch ((ProductionIndex)r.Parent.TableIndex())
            {
                case ProductionIndex.Query:
                    // <Query> ::= <Alter Stm>
                    result = "alter";
                    break;

                case ProductionIndex.Query2:
                    // <Query> ::= <Create Stm>
                    result = "create";
                    break;

                case ProductionIndex.Query3:
                    // <Query> ::= <Delete Stm>
                    result = "delete";
                    break;

                case ProductionIndex.Query4:
                    // <Query> ::= <Drop Stm>
                    result = "drop";
                    break;

                case ProductionIndex.Query5:
                    // <Query> ::= <Insert Stm>
                    result = "insert";
                    break;

                case ProductionIndex.Query6:
                    // <Query> ::= <Select Stm>
                    result = "select";
                    break;

                case ProductionIndex.Query7:
                    // <Query> ::= <Update Stm>
                    result = "update";
                    break;

                case ProductionIndex.Alterstm_Alter_Table_Id_Add_Column:
                    // <Alter Stm> ::= ALTER TABLE Id ADD COLUMN <Field Def List> <Constraint Opt>
                    break;

                case ProductionIndex.Alterstm_Alter_Table_Id_Add:
                    // <Alter Stm> ::= ALTER TABLE Id ADD <Constraint>
                    break;

                case ProductionIndex.Alterstm_Alter_Table_Id_Drop_Column_Id:
                    // <Alter Stm> ::= ALTER TABLE Id DROP COLUMN Id
                    break;

                case ProductionIndex.Alterstm_Alter_Table_Id_Drop_Constraint_Id:
                    // <Alter Stm> ::= ALTER TABLE Id DROP CONSTRAINT Id
                    break;

                case ProductionIndex.Createstm_Create_Index_Integerliteral_On_Id_Lparen_Rparen:
                    // <Create Stm> ::= CREATE <Unique> INDEX IntegerLiteral ON Id '(' <Order List> ')' <With Clause>
                    break;

                case ProductionIndex.Createstm_Create_Table_Id_Lparen_Rparen:
                    // <Create Stm> ::= CREATE TABLE Id '(' <ID List> ')' <Constraint Opt>
                    break;

                case ProductionIndex.Unique_Unique:
                    // <Unique> ::= UNIQUE
                    break;

                case ProductionIndex.Unique:
                    // <Unique> ::= 
                    break;

                case ProductionIndex.Withclause_With_Primary:
                    // <With Clause> ::= WITH PRIMARY
                    break;

                case ProductionIndex.Withclause_With_Disallow_Null:
                    // <With Clause> ::= WITH DISALLOW NULL
                    break;

                case ProductionIndex.Withclause_With_Ignore_Null:
                    // <With Clause> ::= WITH IGNORE NULL
                    break;

                case ProductionIndex.Withclause:
                    // <With Clause> ::= 
                    break;

                case ProductionIndex.Fielddef_Id_Not_Null:
                    // <Field Def> ::= Id <Type> NOT NULL
                    break;

                case ProductionIndex.Fielddef_Id:
                    // <Field Def> ::= Id <Type>
                    break;

                case ProductionIndex.Fielddeflist_Comma:
                    // <Field Def List> ::= <Field Def> ',' <Field Def List>
                    break;

                case ProductionIndex.Fielddeflist:
                    // <Field Def List> ::= <Field Def>
                    break;

                case ProductionIndex.Type_Bit:
                    // <Type> ::= BIT
                    break;

                case ProductionIndex.Type_Date:
                    // <Type> ::= DATE
                    break;

                case ProductionIndex.Type_Time:
                    // <Type> ::= TIME
                    break;

                case ProductionIndex.Type_Timestamp:
                    // <Type> ::= TIMESTAMP
                    break;

                case ProductionIndex.Type_Decimal:
                    // <Type> ::= DECIMAL
                    break;

                case ProductionIndex.Type_Real:
                    // <Type> ::= REAL
                    break;

                case ProductionIndex.Type_Float:
                    // <Type> ::= FLOAT
                    break;

                case ProductionIndex.Type_Smallint:
                    // <Type> ::= SMALLINT
                    break;

                case ProductionIndex.Type_Integer:
                    // <Type> ::= INTEGER
                    break;

                case ProductionIndex.Type_Interval:
                    // <Type> ::= INTERVAL
                    break;

                case ProductionIndex.Type_Character:
                    // <Type> ::= CHARACTER
                    break;

                case ProductionIndex.Constraintopt:
                    // <Constraint Opt> ::= <Constraint>
                    break;

                case ProductionIndex.Constraintopt2:
                    // <Constraint Opt> ::= 
                    break;

                case ProductionIndex.Constraint_Constraint_Id:
                    // <Constraint> ::= CONSTRAINT Id <Constraint Type>
                    break;

                case ProductionIndex.Constraint_Constraint_Id2:
                    // <Constraint> ::= CONSTRAINT Id
                    break;

                case ProductionIndex.Constrainttype_Primary_Key_Lparen_Rparen:
                    // <Constraint Type> ::= PRIMARY KEY '(' <ID List> ')'
                    break;

                case ProductionIndex.Constrainttype_Unique_Lparen_Rparen:
                    // <Constraint Type> ::= UNIQUE '(' <ID List> ')'
                    break;

                case ProductionIndex.Constrainttype_Not_Null_Lparen_Rparen:
                    // <Constraint Type> ::= NOT NULL '(' <ID List> ')'
                    break;

                case ProductionIndex.Constrainttype_Foreign_Key_Lparen_Rparen_References_Id_Lparen_Rparen:
                    // <Constraint Type> ::= FOREIGN KEY '(' <ID List> ')' REFERENCES Id '(' <ID List> ')'
                    break;

                case ProductionIndex.Dropstm_Drop_Table_Id:
                    // <Drop Stm> ::= DROP TABLE Id
                    break;

                case ProductionIndex.Dropstm_Drop_Index_Id_On_Id:
                    // <Drop Stm> ::= DROP INDEX Id ON Id
                    break;

                case ProductionIndex.Insertstm_Insert_Into_Id_Lparen_Rparen:
                    // <Insert Stm> ::= INSERT INTO Id '(' <ID List> ')' <Select Stm>
                    break;

                case ProductionIndex.Insertstm_Insert_Into_Id_Lparen_Rparen_Values_Lparen_Rparen:
                    // <Insert Stm> ::= INSERT INTO Id '(' <ID List> ')' VALUES '(' <Expr List> ')'
                    break;

                case ProductionIndex.Updatestm_Update_Id_Set:
                    // <Update Stm> ::= UPDATE Id SET <Assign List> <Where Clause>
                    break;

                case ProductionIndex.Assignlist_Id_Eq_Comma:
                    // <Assign List> ::= Id '=' <Expression> ',' <Assign List>
                    break;

                case ProductionIndex.Assignlist_Id_Eq:
                    // <Assign List> ::= Id '=' <Expression>
                    break;

                case ProductionIndex.Deletestm_Delete_From_Id:
                    // <Delete Stm> ::= DELETE FROM Id <Where Clause>
                    break;

                case ProductionIndex.Selectstm_Select:
                    // <Select Stm> ::= SELECT <Columns> <Into Clause> <From Clause> <Where Clause> <Group Clause> <Having Clause> <Order Clause>
                    break;

                case ProductionIndex.Columns_Times:
                    // <Columns> ::= <Restriction> '*'
                    break;

                case ProductionIndex.Columns:
                    // <Columns> ::= <Restriction> <Column List>
                    break;

                case ProductionIndex.Columnlist_Comma:
                    // <Column List> ::= <Column Item> ',' <Column List>
                    break;

                case ProductionIndex.Columnlist:
                    // <Column List> ::= <Column Item>
                    break;

                case ProductionIndex.Columnitem:
                    // <Column Item> ::= <Column Source>
                    break;

                case ProductionIndex.Columnitem_Id:
                    // <Column Item> ::= <Column Source> Id
                    break;

                case ProductionIndex.Columnsource:
                    // <Column Source> ::= <Aggregate>
                    break;

                case ProductionIndex.Columnsource_Id:
                    // <Column Source> ::= Id
                    break;

                case ProductionIndex.Restriction_All:
                    // <Restriction> ::= ALL
                    break;

                case ProductionIndex.Restriction_Distinct:
                    // <Restriction> ::= DISTINCT
                    break;

                case ProductionIndex.Restriction:
                    // <Restriction> ::= 
                    break;

                case ProductionIndex.Aggregate_Count_Lparen_Times_Rparen:
                    // <Aggregate> ::= Count '(' '*' ')'
                    break;

                case ProductionIndex.Aggregate_Count_Lparen_Rparen:
                    // <Aggregate> ::= Count '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Avg_Lparen_Rparen:
                    // <Aggregate> ::= Avg '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Min_Lparen_Rparen:
                    // <Aggregate> ::= Min '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Max_Lparen_Rparen:
                    // <Aggregate> ::= Max '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Stdev_Lparen_Rparen:
                    // <Aggregate> ::= StDev '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Stdevp_Lparen_Rparen:
                    // <Aggregate> ::= StDevP '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Sum_Lparen_Rparen:
                    // <Aggregate> ::= Sum '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Var_Lparen_Rparen:
                    // <Aggregate> ::= Var '(' <Expression> ')'
                    break;

                case ProductionIndex.Aggregate_Varp_Lparen_Rparen:
                    // <Aggregate> ::= VarP '(' <Expression> ')'
                    break;

                case ProductionIndex.Intoclause_Into_Id:
                    // <Into Clause> ::= INTO Id
                    break;

                case ProductionIndex.Intoclause:
                    // <Into Clause> ::= 
                    break;

                case ProductionIndex.Fromclause_From:
                    // <From Clause> ::= FROM <ID List> <Join Chain>
                    break;

                case ProductionIndex.Joinchain:
                    // <Join Chain> ::= <Join> <Join Chain>
                    break;

                case ProductionIndex.Joinchain2:
                    // <Join Chain> ::= 
                    break;

                case ProductionIndex.Join_Inner_Join_On_Id_Eq_Id:
                    // <Join> ::= INNER JOIN <ID List> ON Id '=' Id
                    break;

                case ProductionIndex.Join_Left_Join_On_Id_Eq_Id:
                    // <Join> ::= LEFT JOIN <ID List> ON Id '=' Id
                    break;

                case ProductionIndex.Join_Right_Join_On_Id_Eq_Id:
                    // <Join> ::= RIGHT JOIN <ID List> ON Id '=' Id
                    break;

                case ProductionIndex.Join_Join_On_Id_Eq_Id:
                    // <Join> ::= JOIN <ID List> ON Id '=' Id
                    break;

                case ProductionIndex.Whereclause_Where:
                    // <Where Clause> ::= WHERE <Expression>
                    break;

                case ProductionIndex.Whereclause:
                    // <Where Clause> ::= 
                    break;

                case ProductionIndex.Groupclause_Group_By:
                    // <Group Clause> ::= GROUP BY <ID List>
                    break;

                case ProductionIndex.Groupclause:
                    // <Group Clause> ::= 
                    break;

                case ProductionIndex.Orderclause_Order_By:
                    // <Order Clause> ::= ORDER BY <Order List>
                    break;

                case ProductionIndex.Orderclause:
                    // <Order Clause> ::= 
                    break;

                case ProductionIndex.Orderlist_Id_Comma:
                    // <Order List> ::= Id <Order Type> ',' <Order List>
                    break;

                case ProductionIndex.Orderlist_Id:
                    // <Order List> ::= Id <Order Type>
                    break;

                case ProductionIndex.Ordertype_Asc:
                    // <Order Type> ::= ASC
                    break;

                case ProductionIndex.Ordertype_Desc:
                    // <Order Type> ::= DESC
                    break;

                case ProductionIndex.Ordertype:
                    // <Order Type> ::= 
                    break;

                case ProductionIndex.Havingclause_Having:
                    // <Having Clause> ::= HAVING <Expression>
                    break;

                case ProductionIndex.Havingclause:
                    // <Having Clause> ::= 
                    break;

                case ProductionIndex.Expression_Or:
                    // <Expression> ::= <And Exp> OR <Expression>
                    break;

                case ProductionIndex.Expression:
                    // <Expression> ::= <And Exp>
                    break;

                case ProductionIndex.Andexp_And:
                    // <And Exp> ::= <Not Exp> AND <And Exp>
                    break;

                case ProductionIndex.Andexp:
                    // <And Exp> ::= <Not Exp>
                    break;

                case ProductionIndex.Notexp_Not:
                    // <Not Exp> ::= NOT <Pred Exp>
                    break;

                case ProductionIndex.Notexp:
                    // <Not Exp> ::= <Pred Exp>
                    break;

                case ProductionIndex.Predexp_Between_And:
                    // <Pred Exp> ::= <Add Exp> BETWEEN <Add Exp> AND <Add Exp>
                    break;

                case ProductionIndex.Predexp_Not_Between_And:
                    // <Pred Exp> ::= <Add Exp> NOT BETWEEN <Add Exp> AND <Add Exp>
                    break;

                case ProductionIndex.Predexp_Is_Not_Null:
                    // <Pred Exp> ::= <Value> IS NOT NULL
                    break;

                case ProductionIndex.Predexp_Is_Null:
                    // <Pred Exp> ::= <Value> IS NULL
                    break;

                case ProductionIndex.Predexp_Like_Stringliteral:
                    // <Pred Exp> ::= <Add Exp> LIKE StringLiteral
                    break;

                case ProductionIndex.Predexp_In:
                    // <Pred Exp> ::= <Add Exp> IN <Tuple>
                    break;

                case ProductionIndex.Predexp_Eq:
                    // <Pred Exp> ::= <Add Exp> '=' <Add Exp>
                    break;

                case ProductionIndex.Predexp_Ltgt:
                    // <Pred Exp> ::= <Add Exp> '<>' <Add Exp>
                    break;

                case ProductionIndex.Predexp_Exclameq:
                    // <Pred Exp> ::= <Add Exp> '!=' <Add Exp>
                    break;

                case ProductionIndex.Predexp_Gt:
                    // <Pred Exp> ::= <Add Exp> '>' <Add Exp>
                    break;

                case ProductionIndex.Predexp_Gteq:
                    // <Pred Exp> ::= <Add Exp> '>=' <Add Exp>
                    break;

                case ProductionIndex.Predexp_Lt:
                    // <Pred Exp> ::= <Add Exp> '<' <Add Exp>
                    break;

                case ProductionIndex.Predexp_Lteq:
                    // <Pred Exp> ::= <Add Exp> '<=' <Add Exp>
                    break;

                case ProductionIndex.Predexp:
                    // <Pred Exp> ::= <Add Exp>
                    break;

                case ProductionIndex.Addexp_Plus:
                    // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
                    break;

                case ProductionIndex.Addexp_Minus:
                    // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
                    break;

                case ProductionIndex.Addexp:
                    // <Add Exp> ::= <Mult Exp>
                    break;

                case ProductionIndex.Multexp_Times:
                    // <Mult Exp> ::= <Mult Exp> '*' <Negate Exp>
                    break;

                case ProductionIndex.Multexp_Div:
                    // <Mult Exp> ::= <Mult Exp> '/' <Negate Exp>
                    break;

                case ProductionIndex.Multexp:
                    // <Mult Exp> ::= <Negate Exp>
                    break;

                case ProductionIndex.Negateexp_Minus:
                    // <Negate Exp> ::= '-' <Value>
                    break;

                case ProductionIndex.Negateexp:
                    // <Negate Exp> ::= <Value>
                    break;

                case ProductionIndex.Value:
                    // <Value> ::= <Tuple>
                    break;

                case ProductionIndex.Value_Id:
                    // <Value> ::= Id
                    break;

                case ProductionIndex.Value_Integerliteral:
                    // <Value> ::= IntegerLiteral
                    break;

                case ProductionIndex.Value_Realliteral:
                    // <Value> ::= RealLiteral
                    break;

                case ProductionIndex.Value_Stringliteral:
                    // <Value> ::= StringLiteral
                    break;

                case ProductionIndex.Value_Null:
                    // <Value> ::= NULL
                    break;

                case ProductionIndex.Tuple_Lparen_Rparen:
                    // <Tuple> ::= '(' <Select Stm> ')'
                    break;

                case ProductionIndex.Tuple_Lparen_Rparen2:
                    // <Tuple> ::= '(' <Expr List> ')'
                    break;

                case ProductionIndex.Exprlist_Comma:
                    // <Expr List> ::= <Expression> ',' <Expr List>
                    break;

                case ProductionIndex.Exprlist:
                    // <Expr List> ::= <Expression>
                    break;

                case ProductionIndex.Idlist_Comma:
                    // <ID List> ::= <Id Member> ',' <ID List>
                    break;

                case ProductionIndex.Idlist:
                    // <ID List> ::= <Id Member>
                    break;

                case ProductionIndex.Idmember_Id:
                    // <Id Member> ::= Id
                    break;

                case ProductionIndex.Idmember_Id_Id:
                    // <Id Member> ::= Id Id
                    break;

            }  //switch

            return result;
        }

    }; //MyParser
}
